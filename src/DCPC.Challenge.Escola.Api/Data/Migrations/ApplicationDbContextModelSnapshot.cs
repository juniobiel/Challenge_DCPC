// <auto-generated />
using System;
using DCPC.Challenge.Escola.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DCPC.Challenge.Escola.Api.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Aluno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Ativo")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DataNascimento")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Alunos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-3333-4444-555555555501"),
                            Ativo = true,
                            DataNascimento = new DateOnly(2007, 1, 15),
                            Email = "joao.silva@email.com",
                            Nome = "João Silva"
                        },
                        new
                        {
                            Id = new Guid("11111111-2222-3333-4444-555555555502"),
                            Ativo = true,
                            DataNascimento = new DateOnly(2006, 6, 20),
                            Email = "maria.oliveira@email.com",
                            Nome = "Maria Oliveira"
                        },
                        new
                        {
                            Id = new Guid("11111111-2222-3333-4444-555555555503"),
                            Ativo = true,
                            DataNascimento = new DateOnly(2005, 11, 5),
                            Email = "lia.santos@email.com",
                            Nome = "Lia Santos"
                        });
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Curso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CargaHoraria")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cursos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2f9f3b3-8f55-4f1f-9f7b-2f2b3f9a1a01"),
                            CargaHoraria = 80,
                            Nome = ".NET Fundamentals"
                        },
                        new
                        {
                            Id = new Guid("7b4a9d1e-0f4a-4f4e-9b13-0b5f3b7d2a02"),
                            CargaHoraria = 60,
                            Nome = "Matemática Básica"
                        });
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Matricula", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AlunoId")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("DataMatricula")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("TurmaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TurmaId");

                    b.HasIndex("AlunoId", "TurmaId")
                        .IsUnique();

                    b.ToTable("Matriculas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("33333333-4444-5555-6666-777777777701"),
                            AlunoId = new Guid("11111111-2222-3333-4444-555555555501"),
                            DataMatricula = new DateOnly(2025, 2, 10),
                            Status = 1,
                            TurmaId = new Guid("22222222-3333-4444-5555-666666666601")
                        },
                        new
                        {
                            Id = new Guid("33333333-4444-5555-6666-777777777702"),
                            AlunoId = new Guid("11111111-2222-3333-4444-555555555502"),
                            DataMatricula = new DateOnly(2025, 2, 12),
                            Status = 1,
                            TurmaId = new Guid("22222222-3333-4444-5555-666666666601")
                        },
                        new
                        {
                            Id = new Guid("33333333-4444-5555-6666-777777777703"),
                            AlunoId = new Guid("11111111-2222-3333-4444-555555555502"),
                            DataMatricula = new DateOnly(2025, 2, 15),
                            Status = 1,
                            TurmaId = new Guid("22222222-3333-4444-5555-666666666602")
                        },
                        new
                        {
                            Id = new Guid("33333333-4444-5555-6666-777777777704"),
                            AlunoId = new Guid("11111111-2222-3333-4444-555555555503"),
                            DataMatricula = new DateOnly(2025, 2, 18),
                            Status = 1,
                            TurmaId = new Guid("22222222-3333-4444-5555-666666666602")
                        });
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Nota", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Avaliacao")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Data")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MatriculaId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Valor")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatriculaId");

                    b.ToTable("Notas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-5555-6666-7777-888888888801"),
                            Avaliacao = "Prova 1",
                            Data = new DateOnly(2025, 3, 10),
                            MatriculaId = new Guid("33333333-4444-5555-6666-777777777701"),
                            Valor = 8.5m
                        },
                        new
                        {
                            Id = new Guid("44444444-5555-6666-7777-888888888802"),
                            Avaliacao = "Prova 2",
                            Data = new DateOnly(2025, 4, 5),
                            MatriculaId = new Guid("33333333-4444-5555-6666-777777777701"),
                            Valor = 7.0m
                        },
                        new
                        {
                            Id = new Guid("44444444-5555-6666-7777-888888888803"),
                            Avaliacao = "Prova 1",
                            Data = new DateOnly(2025, 3, 10),
                            MatriculaId = new Guid("33333333-4444-5555-6666-777777777702"),
                            Valor = 9.2m
                        },
                        new
                        {
                            Id = new Guid("44444444-5555-6666-7777-888888888804"),
                            Avaliacao = "Trabalho 1",
                            Data = new DateOnly(2025, 3, 25),
                            MatriculaId = new Guid("33333333-4444-5555-6666-777777777703"),
                            Valor = 10.0m
                        });
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Professor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Professores");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1c2d3e4-f5a6-47b8-9c0d-1e2f3a4b5c03"),
                            Email = "ana.souza@escola.com",
                            Nome = "Ana Souza"
                        },
                        new
                        {
                            Id = new Guid("0f1e2d3c-4b5a-6978-9a0b-1c2d3e4f5a04"),
                            Email = "roberto.lima@escola.com",
                            Nome = "Roberto Lima"
                        });
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Turma", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AnoLetivo")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("CursoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nome")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ProfessorId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Semestre")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Turmas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22222222-3333-4444-5555-666666666601"),
                            AnoLetivo = 2025,
                            CursoId = new Guid("f2f9f3b3-8f55-4f1f-9f7b-2f2b3f9a1a01"),
                            Nome = "Prog Manhã 2025",
                            ProfessorId = new Guid("a1c2d3e4-f5a6-47b8-9c0d-1e2f3a4b5c03"),
                            Semestre = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-3333-4444-5555-666666666602"),
                            AnoLetivo = 2025,
                            CursoId = new Guid("7b4a9d1e-0f4a-4f4e-9b13-0b5f3b7d2a02"),
                            Nome = "Math Tarde 2025",
                            ProfessorId = new Guid("0f1e2d3c-4b5a-6978-9a0b-1c2d3e4f5a04"),
                            Semestre = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-3333-4444-5555-666666666603"),
                            AnoLetivo = 2025,
                            CursoId = new Guid("f2f9f3b3-8f55-4f1f-9f7b-2f2b3f9a1a01"),
                            Nome = "Prog Noite 2025",
                            ProfessorId = new Guid("0f1e2d3c-4b5a-6978-9a0b-1c2d3e4f5a04"),
                            Semestre = 2
                        });
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Matricula", b =>
                {
                    b.HasOne("DCPC.Challenge.Escola.Api.Models.Aluno", "Aluno")
                        .WithMany("Matriculas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCPC.Challenge.Escola.Api.Models.Turma", "Turma")
                        .WithMany("Matriculas")
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Nota", b =>
                {
                    b.HasOne("DCPC.Challenge.Escola.Api.Models.Matricula", "Matricula")
                        .WithMany("Notas")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matricula");
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Turma", b =>
                {
                    b.HasOne("DCPC.Challenge.Escola.Api.Models.Curso", "Curso")
                        .WithMany("Turmas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DCPC.Challenge.Escola.Api.Models.Professor", "Professor")
                        .WithMany("Turmas")
                        .HasForeignKey("ProfessorId");

                    b.Navigation("Curso");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Aluno", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Curso", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Matricula", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Professor", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("DCPC.Challenge.Escola.Api.Models.Turma", b =>
                {
                    b.Navigation("Matriculas");
                });
#pragma warning restore 612, 618
        }
    }
}
